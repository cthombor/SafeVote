% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saferank.R
\name{testAdditions}
\alias{testAdditions}
\title{Test the sensitivity of a result to tactical voting.}
\usage{
testAdditions(
  votes,
  alimit = NULL,
  ainc = NULL,
  favoured = NULL,
  tacticalBallot = NULL,
  rankMethod = "SafeRank",
  countMethod = "stv",
  countArgs = NULL
)
}
\arguments{
\item{votes}{A set of ballots}

\item{alimit}{Maximum number of plumping ballots to add}

\item{ainc}{Number of ballots to be added in each step}

\item{favoured}{Name of the candidate being "plumped".  If NULL, a
random candidate is selected from among the candidates not
initially top-ranked.  All other candidates are ranked #2.  An
integer value for 'favoured' is interpreted as an index into
the candidate names.}

\item{tacticalBallot}{A ballot paper i.e. a vector of length
ncol(ballots).  If this argument is non-null, it takes
precedence over 'favoured' when the ballot box is being
stuffed.}

\item{rankMethod}{Name of a ranking attribute in the output of
countMethod}

\item{countMethod}{The name of a function which will count the
ballots}

\item{countArgs}{List of args to be passed to countMethod (in
addition to votes)}
}
\value{
Number of plumping ballots required for the tactical ballot
    (if any) to affect the ranking, or for the favoured candidate
    to move up in the ranking; or zero, if the termination
    condition has been reached without the tactical voting (if any)
    having affected the ranking or the ranking of the favoured
    candidate (if any) having improved.  The results of the final
    ballot count are attached as an attribute "finalResults".
}
\description{
Ballots are added until the ranking changes, or until a specified number of 
ballots (`alimit`) have been deleted.  A simple tactic of "plumping" is
used, if a `favoured` candidate is specified.  Alternatively, 
a `tacticalBallot` may be specified.
}
\examples{
{
data(food_election)
testAdditions(food_election, countMethod="condorcet", alimit=10)
testAdditions(food_election, favoured=1, countArgs=list(nseats=10))
testAdditions(food_election, tacticalBallot=c(1,2,3,4,5), alimit=5)
}
}
