% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saferank.R
\name{testFraction}
\alias{testFraction}
\title{Bootstrapping experiment, with fractional counts of a ballot box.}
\usage{
testFraction(
  votes = NULL,
  astart = NULL,
  ainc = NULL,
  arep = NULL,
  trep = NULL,
  rankMethod = "safeRank",
  countMethod = "stv",
  countArgs = list(),
  exptName = NULL,
  quiet = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{votes}{A numeric matrix: one row per ballot, one column per candidate}

\item{astart}{Starting number of ballots (min 2)}

\item{ainc}{Number of ballots to be added in each step. Must be non-negative.}

\item{arep}{Number of repetitions of the test on each step. Required to be
non-\code{NULL} if \code{ainc=0} && is.null(trep)`.}

\item{trep}{Limit on the total number of simulated elections. Required to be
non-\code{NULL} if \code{ainc=0 && is.null(arep)}.}

\item{rankMethod}{Name of a ranking attribute in the output of countMethod,
e.g. "elected", "ranking", "safeRank".}

\item{countMethod}{The name of a function which will count the ballots,
\emph{e.g.} "stv", "condorcet"}

\item{countArgs}{List of args to be passed to \code{countMethod} (in addition to
\code{votes})}

\item{exptName}{stem-name of experimental units \emph{e.g.} "E".  If \code{NULL}, then
a 3-character string of capital letters is chosen at random.}

\item{quiet}{\code{TRUE} to suppress all output}

\item{verbose}{\code{TRUE} to produce diagnostic output}
}
\value{
a \href{new_SafeRankExpt.html}{SafeRankExpt} object of experimental
results.
}
\description{
Starting from some number (\code{astart}) of randomly-selected ballots, an
increasingly-large collection of randomly-selected ballots are counted. The
ballots are chosen independently without replacement for each experimental
unit; if you want to count decreasingly-sized portions of a single sample of
ballots, use \code{\link[=testDeletions]{testDeletions()}}.
}
\examples{
data(food_election)
testFraction(food_election, countMethod="condorcet",
             countArgs=list(safety=0.5,complete.ranking=TRUE))
testFraction(dublin_west, astart=20, ainc=10, arep=2, trep=3, 
             countMethod="stv", rankMethod="elected", quiet=FALSE)
}
